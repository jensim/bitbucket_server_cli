name: Rust

on:
  push:
    paths:
      - '.github/workflows/rust.yml'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
      - 'integration_test/**'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    needs:
      - fmt
      - clippy
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    continue-on-error: ${{ matrix.rust != 'stable' }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: test-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-${{ matrix.os }}-${{ matrix.rust }}-
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - name: Build
        run: cargo build --examples --lib --bins
      - name: Test
        run: cargo test --verbose --examples --lib --bins
      - name: Compress artifact
        if: ${{ matrix.rust == 'stable' }}
        shell: bash
        run: |
          pushd target/release
          (ls -1 bitbucket_server_cli{,exe} 2>/dev/null || printf '') | xargs -I{} tar -czvf "bitbucket_server_cli-${{ matrix.os }}.tgz" '{}'
          mv "bitbucket_server_cli-${{ matrix.os }}.tgz" ../..
          popd
      - name: Save Artifact
        if: ${{ matrix.rust == 'stable' }}
        uses: actions/upload-artifact@v1
        with:
          name: bitbucket_server_cli-${{ matrix.os }}
          path: bitbucket_server_cli-${{ matrix.os }}.tgz
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: integration-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            integration-test-
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: "Run integration test"
        run: integration_test/run_integration_test.sh
  clippy:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            clippy-
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: Install clippy
        run: rustup component add clippy
      - name: Run clippy
        run: cargo clippy --all-targets -- --deny clippy::all
  fmt:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    continue-on-error: ${{ matrix.rust != 'stable' }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: fmt-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            fmt-${{ matrix.rust }}-
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Run rustfmt
        run: cargo fmt -- --check
  draft_release:
    name: Draft Release
    needs:
     - integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Build ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  upload_assets:
    name: Upload release assets
    needs:
      - draft_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    steps:
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Load Release tar file from release job
        uses: actions/download-artifact@v1
        with:
          name: bitbucket_server_cli-${{ matrix.os }}
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: bitbucket_server_cli-${{ matrix.os }}/bitbucket_server_cli-${{ matrix.os }}.tgz
          asset_name: bitbucket_server_cli-${{ matrix.os }}.tgz
          asset_content_type: application/tgz
  sum:
    needs:
      - fmt
      - clippy
      - test
      - integration-test
      - draft_release
      - upload_assets
    runs-on: ubuntu-latest
    steps:
      - name: "Dummy output"
        shell: bash
        run: echo 'We did it!'
